{
  "name": "cookie-component",
  "description": "Client-Side Cookie Manipulation API",
  "homepage": "http://github.com/ScottHamper/Cookies",
  "keywords": [
    "cookies",
    "client",
    "browser"
  ],
  "author": {
    "name": "Scott Hamper"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ScottHamper/Cookies.git"
  },
  "main": "cookies.js",
  "version": "0.1.5",
  "component": {
    "scripts": {
      "cookie": "cookies.js"
    }
  },
  "readme": "# Cookies.js\n\nCookies.js is a small client-side javascript library that makes managing cookies easy.\n\n## Features\n- Caches cookie values, making sequential reads faster.\n- Supports AMD / CommonJS loaders.\n- Cross browser.\n- Lightweight (less than 1 KB, minified and gzipped).\n\n## Browser Compatibility\nThe following browsers have passed all of the Cookies.js unit tests:\n- Chrome\n- Firefox 3+\n- Safari 4+\n- Opera 10+\n- Internet Explorer 6+\n\n## A Note About Encoding\nCookies.js URI encodes cookie keys and values, and expects cookie keys to be URI encoded when accessing a cookie.\nKeep this in mind when working with cookies on the server side.\n\n### .NET Users\nDo not use [HttpUtility.UrlEncode](http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx) and\n[HttpUtility.UrlDecode](http://msdn.microsoft.com/en-us/library/adwtk1fy.aspx) on cookie keys or values. `HttpUtility.UrlEncode` will\nimproperly escape space characters to `'+'` and lower case every escape sequence. `HttpUtility.UrlDecode` will improperly unescape\nevery `'+'` to a space character. Instead, use\n[System.Uri.EscapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx) and\n[System.Uri.UnescapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.unescapedatastring.aspx).\n\n\n# API Reference\n\n## Methods\n\n### Cookies.set(key, value [, options])\n*Alias: Cookies(key, value [, options])*\n\nSets a cookie in the document. If the cookie does not already exist, it will be created.\n\n#### Arguments:\n*key*: A string value of the cookie key to set  \n*value*: A string value of the cookie value to set  \n*options*: An object containing additional parameters about the cookie (discussed below)\n\n#### Returns:\nThe `Cookies` object is returned to support chaining.\n\n#### The 'options' Object:\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie  \n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \n*secure*: A boolean value of whether or not the cookie should only be available over SSL\n\nIf any property is left undefined, the browser's default value will be used instead. A default value\nfor any property may be set in the `Cookies.defaults` object.\n\n**Why use 'expires' instead of 'max-age' (or why not both)?**  \nInternet Explorer 6 - 8 do not support 'max-age', so Cookies.js always uses 'expires' internally.\nHowever, Cookies.js simplifies things by allowing the `options.expires` property to be used in the\nsame way as 'max-age' (by setting `options.expires` to the number of seconds the cookie should exist for).\n\n#### Example usage:\n    // Setting a cookie value\n    Cookies.set('key', 'value');\n    \n    // Chaining sets together\n    Cookies.set('key', 'value').set('hello', 'world');\n    \n    // Setting cookies with additional options\n    Cookies.set('key', 'value', { domain: 'www.example.com', secure: true });\n    \n    // Setting cookies with expiration values\n    Cookies.set('key', 'value', { expires: 600 }); // Expires in 10 minutes\n    Cookies.set('key', 'value', { expires: '01-01-2012' });\n    Cookies.set('key', 'value', { expires: new Date(2012, 0, 1) });\n    \n    // Using the alias\n    Cookies('key', 'value', { secure: true });\n\n### Cookies.get(key)\n*Alias: Cookies(key)*\n\nRetrieves the cookie value of the most locally scoped cookie with the specified key.\n\n#### Arguments:\n*key*: A string value of a cookie key\n\n#### Returns:\nThe string value of the cookie.\n\n#### Example Usage:\n    // First set a cookie\n    Cookies.set('key', 'value');\n    \n    // Get the cookie value\n    Cookies.get('key'); // \"value\"\n    \n    // Using the alias\n    Cookies('key'); // \"value\"\n    \n### Cookies.expire(key [, options])\n*Alias: Cookies(key, `undefined` [, options])*\n\nExpires a cookie, removing it from the document.\n\n#### Arguments:\n*key*: A string value of the cookie key to expire  \n*options*: An object containing additional parameters about the cookie (discussed below)\n\n#### Returns:\nThe `Cookies` object is returned to support chaining.\n\n#### The 'options' Object:\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie\n\nIf any property is left `undefined`, the browser's default value will be used instead. A default value\nfor any property may be set in the `Cookies.defaults` object.\n\n#### Example Usage:\n    // First set a cookie and get its value\n    Cookies.set('key', 'value').get('key'); // \"value\"\n    \n    // Expire the cookie and try to get its value\n    Cookies.expire('key').get('key'); // undefined\n    \n    // Using the alias instead\n    Cookies('key', undefined);\n    \n\n## Properties\n\n### Cookies.enabled\nA boolean value of whether or not the browser has cookies enabled.\n\n#### Example Usage:\n    if (Cookies.enabled) {\n        Cookies.set('key', 'value');\n    }\n\n### Cookies.defaults\nAn object representing default options to be used when setting and expiring cookie values.\n`Cookies.defaults` supports the following properties:\n\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie  \n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \n*secure*: A boolean value of whether or not the cookie should only be available over SSL\n\nBy default, only `Cookies.defaults.path` is set to `'/'`, all other properties are `undefined`.\nIf any property is left undefined, the browser's default value will be used instead.\n\n#### Example Usage:\n    Cookies.defaults = {\n        path: '/',\n        secure: true\n    };\n    \n    Cookies.set('key', 'value'); // Will be secure and have a path of '/'\n    Cookies.expire('key'); // Will expire the cookie with a path of '/'\n    \n    \n# Change Log\n\n## 0.2.0\n- Cookie values are no longer automatically JSON encoded/decoded. This featured was deemed out of the scope of the library.\nThis change also removes the dependency on a JSON shim for older browsers.\n\n## 0.1.7\n- Changed cookie value encoding to only encode the special characters defined in [RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt)\n\n## 0.1.6\n- Added `'use strict';` directive.\n- Removed some extraneous code.\n\n## 0.1.5\n- Added CommonJS module support.\n- Setting an `undefined` value with `Cookies.set` now expires the cookie, mirroring the `Cookies.expire` alias syntax.\n- Simplified how the `document.cookie` string is parsed.\n\n## 0.1.4\n- Fixed a bug where setting a cookie's `secure` value to`false` caused the `Cookies.defaults.secure` value to be used instead.\n\n## 0.1.3\n- Added aliases for `Cookies.set` and `Cookies.expire`.\n\n## 0.1.2\n- Set `Cookies.defaults.path` to `'/'`.\n- Replaced `escape` and `unescape` function calls with `encodeURIComponent` and `decodeURIComponent`, because the former are deprecated.\n- Cookie keys are now URI encoded in addition to cookie values.\n\n## 0.1.1\n- Cross browser fixes.\n\n## 0.1.0\n- Initial commit.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ScottHamper/Cookies/issues"
  },
  "_id": "cookie-component@0.1.5",
  "dist": {
    "shasum": "54edc1400e560ae7249005c41f6c202de30ad7b5"
  },
  "_from": "cookie-component@",
  "_resolved": "https://registry.npmjs.org/cookie-component/-/cookie-component-0.1.5.tgz"
}
